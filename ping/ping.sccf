//{"author":"Felmachersoft","license":"MIT","description":"Simple example demonstrating how to use the ExecutableController."}
--window-hide_url_field=true
--browser-js-allow_objects=ExecutableController
--html=
<!doctype html>
<html>

<head>
	<title>Ping example</title>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
	<script src="https://www.chartjs.org/samples/latest/utils.js"></script>
	<style>
	canvas{
		-moz-user-select: none;
		-webkit-user-select: none;
		-ms-user-select: none;
	}
	</style>
</head>

<body>
	<div>
		<label>Url to ping:</label>
		<input id="url" type="text" value="www.google.com">
		<input id="start" type="button" value="start ping">
		<input id="stop" type="button" value="stop" style="display:none;">
		<input id="clear" type="button" value="clear">
	</div>
	<div style="width:100%;">
		<canvas id="canvas"></canvas>
	</div>
	<script>
		
		var startPing = function(){
			document.getElementById('start').style.display = 'none';
			document.getElementById('stop').style.display = '';
			document.getElementById('url').setAttribute("disabled", true);

			let url = document.getElementById('url').value;
			ScChrom.addCallback('ping_stop', function (value) {
				document.getElementById('start').style.display = '';
				document.getElementById('stop').style.display = 'none';
				document.getElementById('url').removeAttribute("disabled");
                        });
                        ScChrom.addCallback('ping_result', function (value) {
				if(!value.includes('='))
          return;
				let timeString = value.split('ms');
        timeString = timeString[0].split('=');
				addPingTime(timeString[timeString.length - 1]);
      });
      ScChrom.addCallback('ping_error', function (value) {
        alert('Error while pinging: ' + value);
      });
			ScChrom.ExecutableController.startProgram('ping', '-t ' + url, 'ping_stop', 'ping_result', 'ping_error', true);

			window.myLine.update();
		}
		var addPingTime = function(time){
			config.data.labels.push(config.data.labels.length);
						
			config.data.datasets.forEach(function(dataset) {
				dataset.data.push(time);
			});
			
			window.myLine.update();
		}
		var stopPing = function(){
			ScChrom.ExecutableController.killProgram('ping_stop');
		}
		var clear = function(){
			// remove the label first
			while(config.data.labels.length > 0)
				config.data.labels.pop(); 

			config.data.datasets.forEach(function(dataset) {
				while(dataset.data.length > 0)
					dataset.data.pop();
			});

			window.myLine.update();
		}

		document.getElementById('start').addEventListener('click', startPing);
		document.getElementById('stop').addEventListener('click', stopPing);
		document.getElementById('clear').addEventListener('click', clear);
		
		var config = {
			type: 'line',
			data: {
				datasets: [{
					label: 'Ping time in milliseconds',
					backgroundColor: window.chartColors.red,
					borderColor: window.chartColors.red,
					data: [
					],
					fill: false,
				}]
			},
			options: {
				responsive: true,
				title: {
					display: true,
					text: 'Ping time to server'
				},
				tooltips: {
					mode: 'index',
					intersect: false,
				},
				hover: {
					mode: 'nearest',
					intersect: true
				},
				scales: {
					xAxes: [{
						display: true,
						scaleLabel: {
							display: true
						}
					}],
					yAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'ms'
						}
					}]
				}
			}
		};

		window.onload = function() {
			var ctx = document.getElementById('canvas').getContext('2d');
			window.myLine = new Chart(ctx, config);
		};
		
	</script>
</body>

</html>
